{
  "name": "mp4js",
  "version": "0.0.2",
  "author": {
    "name": "lennart"
  },
  "description": "A modern MP4 parser written completely in JavaScript, making use of typed arrays and the HTML5 File API",
  "main": "./dist/mp4.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/lennart/mp4.git"
  },
  "keywords": [
    "mp4",
    "parser"
  ],
  "license": "MIT",
  "devDependencies": {
    "uglify-js": "~2.4.1"
  },
  "readme": "mp4.js - Javascript MP4 tag parser\n===\n\n**mp4.js** is a JavaScript library for reading and parsing metatags of MP4 files (m4a,m4v,ALAC). **mp4.js** can parse metadata within a browser or Node environment. It also supports reading from local files (Node-only), same-origin URLs (AJAX) and File instances (HTML5 File API).\n\nCompatibility for AJAX/FileReaderAPI and nodejs is taken from [https://github.com/43081j/id3](43081j's ID3.js), \nimplementation details are based upon the magnificent [taglib](https://github.com/taglib/taglib), thanks for that!\n\nAJAX\n===\n\n```html\n<script src=\"mp4.min.js\"></script>\n<script type=\"text/javascript\">\nmp4('/audio/track.m4a', function(err, tags) {\n\t// tags now contains tags\n});\n</script>\n```\n\nHere the MP4 is being requested by partial AJAX requests, such that only the metatags are read rather than the file as a whole.\n\nLocal Files\n===\n\nFirst, install **mp4.js** using NPM, the Node package manager.\n\n```\nnpm install mp4js\n```\n\nThen use it like so:\n\n```javascript\nvar mp4 = require('mp4js');\n\nmp4({ file: './track.m4a', type: 'local' }, function(err, tags) {\n\t// tags now contains your MP4 tags\n});\n```\n\nNote that here, the type is set to 'local' directly so that **mp4.js** will attempt to read from the local file-system using `fs`.\n\nThis will **only work under NodeJS**.\n\nFile API (HTML5)\n===\n\n```html\n<script src=\"mp4.min.js\"></script>\n<script type=\"text/javascript\">\ndocument.querySelector('input[type=\"file\"]').onchange = function(e) {\n\tmp4(this.files[0], function(err, tags) {\n\t\t// tags now contains your MP4 tags\n\t});\n}\n</script>\n```\n\nThis will read the data from the File instance using slices, so the entire file is not loaded into memory but rather only the tags.\n\nFormat\n===\n\nTags are passed as an object of the following format:\n\n```json\n{\n\t\"artist\": \"Song artist\",\n\t\"title\": \"Song name\",\n\t\"album\": \"Song album\",\n\t\"year\": \"2013\",\n\t\"date\": \"2013-01-10T20:20:10Z\",\n\t\"tracknumber\": [2, 18]\n\t\"track\": \"2/18\"\n}\n````\n\nThe `artist`, `title`, `album` and `year` properties will always exist, though they will default to null.\n\n\nImages\n===\n\nOn occasion, an MP4 may have an image embedded in the metatag. If this is the case, it will be available through `cover`. This has a structure like so:\n\n__FIXME__ (the API does not pass the MP4 cover through yet, but parsing of covers is ready)\n```json\n{\n\t\"type\": \"cover-front\",\n\t\"mime\": \"image/jpeg\",\n\t\"description\": null,\n\t\"data\": ArrayBuffer\n}\n```\n\nAs you can see, the data is provided as an `ArrayBuffer`. To access it, you may use a `DataView` or typed array such as `Uint8Array`.\n\nLicense\n===\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lennart/mp4/issues"
  },
  "_id": "mp4js@0.0.2",
  "dist": {
    "shasum": "1497ec72ee3ac6a1ba7f31c89b993ae42fd2b3fb",
    "tarball": "http://registry.npmjs.org/mp4js/-/mp4js-0.0.2.tgz"
  },
  "_from": "mp4js@",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "lmaa",
    "email": "me@lmaa.name"
  },
  "maintainers": [
    {
      "name": "lmaa",
      "email": "me@lmaa.name"
    }
  ],
  "directories": {},
  "_shasum": "1497ec72ee3ac6a1ba7f31c89b993ae42fd2b3fb",
  "_resolved": "https://registry.npmjs.org/mp4js/-/mp4js-0.0.2.tgz"
}
